import{_ as a,B as l,o,c as p,D as e,N as s}from"./chunks/framework.728801c0.js";const d=JSON.parse('{"title":"Search","description":"","frontmatter":{},"headers":[],"relativePath":"section/search.md"}'),t={name:"section/search.md"},c=s('<h1 id="search" tabindex="-1">Search <a class="header-anchor" href="#search" aria-label="Permalink to &quot;Search&quot;">​</a></h1><nav class="table-of-contents"><ul><li><a href="#input">Input</a></li><li><a href="#method">Method</a><ul><li><a href="#breaking-symmetries">Breaking Symmetries</a></li><li><a href="#golang">Golang</a></li><li><a href="#step">Step()</a></li><li><a href="#branch">Branch()</a></li><li><a href="#bound">Bound()</a></li></ul></li><li><a href="#run">Run</a></li></ul></nav><h2 id="input" tabindex="-1">Input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;Input&quot;">​</a></h2><p>The search algorithm takes as input a partial <a href="./#definitions">sequence</a> of 0 to 27 elements, together constraining the universe of possible <a href="./#definitions">snake cubes</a> to search:</p><ul><li>full contraint: 27 elements represent one <strong>snake cube</strong> exactly.</li><li>no constraint: 0 element represents all possible <strong>snake cubes</strong></li><li>between 1 and 26 elements represent a section of <strong>snake cube</strong> universe.<br> EXAMPLE: partial <strong>sequence</strong> <code>01101</code> represents all snake cubes starting with cubelets [<strong>end</strong>, <strong>turn</strong>, <strong>turn</strong>, <strong>straight</strong>,<strong>turn</strong>] and not contraint on the following ones.</li></ul><h2 id="method" tabindex="-1">Method <a class="header-anchor" href="#method" aria-label="Permalink to &quot;Method&quot;">​</a></h2>',6),r=s(`<p>The search is <a href="https://en.wikipedia.org/wiki/Recursion_(computer_science)" target="_blank" rel="noreferrer">recursive</a> starting from a given <a href="./#definitions">start position</a> among the 27 possible.<br> In a typical <a href="https://en.wikipedia.org/wiki/Branch_and_bound" target="_blank" rel="noreferrer">branch and bound</a> approach the algo is described in the 3 main functions:</p><ul><li><a href="#step">step()</a>: move on one <strong>cubelet</strong> in developing <strong>path</strong>.</li><li><a href="#branch">branch()</a>: decide and launch recursive exploration all possible next steps for <strong>path</strong>.</li><li><a href="#bound">bound: isValidPosition()</a>: stops if candidate position is invalid i.e. lies outside cube or overlaps with <strong>path</strong> so far.</li></ul><p>See commented code for these 3 functions below.</p><h3 id="breaking-symmetries" tabindex="-1">Breaking Symmetries <a class="header-anchor" href="#breaking-symmetries" aria-label="Permalink to &quot;Breaking Symmetries&quot;">​</a></h3><p>The search is careful to avoid counting the same solutions multiple times. Indeed a cube can be rotated into itself in 24 distinct ways. Each such rotated cube has 10 symmetrical positions (intial position + 9 axes of symmetry). Moreover a <strong>snake cube</strong> is unordered i.e. a <strong>snake cube</strong> and its reverse are the same object.</p><p>To do so the algo uses 2 tricks:</p><ol><li>It break geometric symmetries by <ul><li>ordering: <ul><li>dimensions <code>x (0) &lt; y (1) &lt; z (2)</code>.</li><li>directions <code>positive (0) &lt; negative (1)</code>.</li></ul></li><li>then forcing exploration in this order: <ul><li>parameter <code>exploredDim</code> enforces the dimensions order</li><li>function <code>branch()</code> explores direction <code>+k</code> before <code>-k</code></li></ul></li></ul></li><li>It keeps a <strong>solution</strong> only if its <strong>direction</strong> is <strong>lexicographically <em>smaller</em> or <em>equal</em></strong> to that of the reverse solution, which must also be valid and consequently will be discovered in the search. This filtering avoids counting all solutions twice. The <strong>&quot;<em>equal</em>&quot;</strong> case covers palindromic <strong>snake cubes</strong> i.e. identical in reverse order.</li></ol><h3 id="golang" tabindex="-1">Golang <a class="header-anchor" href="#golang" aria-label="Permalink to &quot;Golang&quot;">​</a></h3><p>The search is implemented in <a href="https://go.dev/" target="_blank" rel="noreferrer">go</a> which has many benefits, among them:</p><ul><li>Easy to learn/read/write</li><li>High performance</li><li>Builtin <a href="https://www.golang-book.com/books/intro/10" target="_blank" rel="noreferrer">concurrency</a><ul><li>This allows to run the search from each 27 <a href="./#definitions">start position</a> in parallel.<br> See function <a href="https://github.com/oscar6echo/snake-cube-go/blob/29be92c5a5f4f547fde431a5521b4435dad061ae/solver/search.go#L379" target="_blank" rel="noreferrer">RunParallel</a></li></ul></li></ul><h3 id="step" tabindex="-1">Step() <a class="header-anchor" href="#step" aria-label="Permalink to &quot;Step()&quot;">​</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/oscar6echo/snake-cube-go/blob/main/solver/search.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SolverState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">step</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    n </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">              </span><span style="color:#676E95;font-style:italic;">// stage from 0 to 26</span></span>
<span class="line"><span style="color:#A6ACCD;">    pos Pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// current position as [x, y, z]</span></span>
<span class="line"><span style="color:#A6ACCD;">    direct </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// direction</span></span>
<span class="line"><span style="color:#A6ACCD;">    exploredDim </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// 0, 1, 2 for x, y, z</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// direction sign give the direction move: positive or negative</span></span>
<span class="line"><span style="color:#A6ACCD;">    sign </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">signInt</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">direct</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// abs(direction) gives direction axis: 1, 2, 3 -&gt; x, y, z</span></span>
<span class="line"><span style="color:#A6ACCD;">    newPos </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> pos</span></span>
<span class="line"><span style="color:#A6ACCD;">    newPos</span><span style="color:#89DDFF;">[</span><span style="color:#82AAFF;">abs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">direct</span><span style="color:#89DDFF;">)-</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+=</span><span style="color:#A6ACCD;"> sign</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// discard if invalid position i.e. out of cube or overlap</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">isValidPosition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newPos</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// grow path</span></span>
<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">newPos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]][</span><span style="color:#A6ACCD;">newPos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]][</span><span style="color:#A6ACCD;">newPos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">2</span></span>
<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> direct</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// start branch</span></span>
<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">branch</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> newPos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direct</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exploredDim</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// reset after branch complete</span></span>
<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">newPos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]][</span><span style="color:#A6ACCD;">newPos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]][</span><span style="color:#A6ACCD;">newPos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="branch" tabindex="-1">Branch() <a class="header-anchor" href="#branch" aria-label="Permalink to &quot;Branch()&quot;">​</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/oscar6echo/snake-cube-go/blob/main/solver/search.go</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SolverState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">branch</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    n </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">              </span><span style="color:#676E95;font-style:italic;">// stage from 0 to 26</span></span>
<span class="line"><span style="color:#A6ACCD;">    pos Pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// current position as [x, y, z]</span></span>
<span class="line"><span style="color:#A6ACCD;">    direct </span><span style="color:#C792EA;">int</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">         </span><span style="color:#676E95;font-style:italic;">// direction</span></span>
<span class="line"><span style="color:#A6ACCD;">    exploredDim </span><span style="color:#C792EA;">int</span><span style="color:#A6ACCD;">     </span><span style="color:#676E95;font-style:italic;">// 0, 1, 2 for x, y, z</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">var</span><span style="color:#A6ACCD;"> k </span><span style="color:#C792EA;">int</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// L = 27</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">L</span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// path is complete</span></span>
<span class="line"><span style="color:#A6ACCD;">        state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequence</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">        isLexicographicallySmallerOrEqual</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> isPalindrome </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">checkSolution</span><span style="color:#89DDFF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> isLexicographicallySmallerOrEqual </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// only keep solutions if lexicographically smaller or equal</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">//  to discard symmetrical solutions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// sequence = snake cube uuid</span></span>
<span class="line"><span style="color:#A6ACCD;">            sequence </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">buildLexicographicSmallerSequence</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequence</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            direction </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">copySlice</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">direction</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            path </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">copyPath</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            startPos </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">StartPos</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">            solution </span><span style="color:#89DDFF;">:=</span><span style="color:#A6ACCD;"> Solution</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                Sequence</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   sequence</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                Direction</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">  direction</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                Path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">       path</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                StartPos</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;">   startPos</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">                Palindrome</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> isPalindrome</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SolutionStore </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">append</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">SolutionStore</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> solution</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// apply constraints in sequenceIn = input sequence</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequenceIn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequenceIn</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// go straight</span></span>
<span class="line"><span style="color:#A6ACCD;">            state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequence</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span></span>
<span class="line"><span style="color:#A6ACCD;">            state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">step</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> direct</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exploredDim</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// apply constraints in sequenceIn = input sequence</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> n </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">len</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequenceIn</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequenceIn</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// make turn</span></span>
<span class="line"><span style="color:#A6ACCD;">            state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">sequence</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#676E95;font-style:italic;">// explore under exploredDim constraint</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">&lt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">min</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">exploredDim</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">);</span><span style="color:#A6ACCD;"> k</span><span style="color:#89DDFF;">++</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// turn orthogonal to current direction</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> k </span><span style="color:#89DDFF;">!=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">abs</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">direct</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                    </span><span style="color:#676E95;font-style:italic;">// explore both direction, starting with positive</span></span>
<span class="line"><span style="color:#A6ACCD;">                    state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">step</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exploredDim</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">                    state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">step</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">-</span><span style="color:#A6ACCD;">k</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exploredDim</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> exploredDim </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">                </span><span style="color:#676E95;font-style:italic;">// only after exploration is done increase exploredDim by one</span></span>
<span class="line"><span style="color:#A6ACCD;">                state</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">step</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">n</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exploredDim</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> exploredDim</span><span style="color:#89DDFF;">+</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="bound" tabindex="-1">Bound() <a class="header-anchor" href="#bound" aria-label="Permalink to &quot;Bound()&quot;">​</a></h3><div class="language-go"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// https://github.com/oscar6echo/snake-cube-go/blob/main/solver/search.go</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">state </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">SolverState</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">isValidPosition</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">pos Pos</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">bool</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#676E95;font-style:italic;">// lies within cube 0&lt;=x,y,z&lt;3</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">3</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#676E95;font-style:italic;">// must be vacant position</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]][</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]][</span><span style="color:#A6ACCD;">pos</span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">]]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">==</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">false</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="run" tabindex="-1">Run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;Run&quot;">​</a></h2><p>The execution is very fast.<br> The exhaustive search is completed in about 0.5s 🎉</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">.</span><span style="color:#FFCB6B;">/solver</span></span>
<span class="line"><span style="color:#FFCB6B;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">RunParallel</span></span>
<span class="line"><span style="color:#82AAFF;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">==&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1906</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">solutions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">==&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1301</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">solutions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">==&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8779</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">solutions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">==&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">39718</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">solutions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">for</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">search</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">time:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">530.422995ms</span></span>
<span class="line"><span style="color:#FFCB6B;">shape</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">time:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">157.973112ms</span></span>
<span class="line"><span style="color:#FFCB6B;">nb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sequences:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">11487</span></span>
<span class="line"><span style="color:#FFCB6B;">nb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">solutions:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">51704</span></span>
<span class="line"><span style="color:#FFCB6B;">solutions</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">saved</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">to:</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">solutions.json</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">done</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">in</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">108.953654ms</span></span>
<span class="line"></span></code></pre></div><p>The solutions available for postprocessing in file <a href="https://github.com/oscar6echo/snake-cube-go/raw/main/solutions.json" target="_blank" rel="noreferrer">solutions.json</a>.</p>`,20);function D(y,C,i,A,F,h){const n=l("ShowImage");return o(),p("div",null,[c,e(n,{img:"/img/snake-cube-done.jpg",width:"250",caption:"Looking for solutions !"}),r])}const g=a(t,[["render",D]]);export{d as __pageData,g as default};
